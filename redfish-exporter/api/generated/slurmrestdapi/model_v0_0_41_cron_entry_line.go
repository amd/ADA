/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.08.0-0rc1&openapi/slurmctld&openapi/v0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestdapi

import (
	"encoding/json"
)

// checks if the V0041CronEntryLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0041CronEntryLine{}

// V0041CronEntryLine struct for V0041CronEntryLine
type V0041CronEntryLine struct {
	Start *int32 `json:"start,omitempty"`
	End   *int32 `json:"end,omitempty"`
}

// NewV0041CronEntryLine instantiates a new V0041CronEntryLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0041CronEntryLine() *V0041CronEntryLine {
	this := V0041CronEntryLine{}
	return &this
}

// NewV0041CronEntryLineWithDefaults instantiates a new V0041CronEntryLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0041CronEntryLineWithDefaults() *V0041CronEntryLine {
	this := V0041CronEntryLine{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *V0041CronEntryLine) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041CronEntryLine) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *V0041CronEntryLine) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *V0041CronEntryLine) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *V0041CronEntryLine) GetEnd() int32 {
	if o == nil || IsNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041CronEntryLine) GetEndOk() (*int32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *V0041CronEntryLine) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *V0041CronEntryLine) SetEnd(v int32) {
	o.End = &v
}

func (o V0041CronEntryLine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0041CronEntryLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableV0041CronEntryLine struct {
	value *V0041CronEntryLine
	isSet bool
}

func (v NullableV0041CronEntryLine) Get() *V0041CronEntryLine {
	return v.value
}

func (v *NullableV0041CronEntryLine) Set(val *V0041CronEntryLine) {
	v.value = val
	v.isSet = true
}

func (v NullableV0041CronEntryLine) IsSet() bool {
	return v.isSet
}

func (v *NullableV0041CronEntryLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0041CronEntryLine(val *V0041CronEntryLine) *NullableV0041CronEntryLine {
	return &NullableV0041CronEntryLine{value: val, isSet: true}
}

func (v NullableV0041CronEntryLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0041CronEntryLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
