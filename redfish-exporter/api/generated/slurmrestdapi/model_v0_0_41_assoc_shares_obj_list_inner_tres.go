/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.08.0-0rc1&openapi/slurmctld&openapi/v0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestdapi

import (
	"encoding/json"
)

// checks if the V0041AssocSharesObjListInnerTres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0041AssocSharesObjListInnerTres{}

// V0041AssocSharesObjListInnerTres struct for V0041AssocSharesObjListInnerTres
type V0041AssocSharesObjListInnerTres struct {
	RunSeconds   []V0041SharesUint64TresListInner   `json:"run_seconds,omitempty"`
	GroupMinutes []V0041SharesUint64TresListInner   `json:"group_minutes,omitempty"`
	Usage        []V0041SharesFloat128TresListInner `json:"usage,omitempty"`
}

// NewV0041AssocSharesObjListInnerTres instantiates a new V0041AssocSharesObjListInnerTres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0041AssocSharesObjListInnerTres() *V0041AssocSharesObjListInnerTres {
	this := V0041AssocSharesObjListInnerTres{}
	return &this
}

// NewV0041AssocSharesObjListInnerTresWithDefaults instantiates a new V0041AssocSharesObjListInnerTres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0041AssocSharesObjListInnerTresWithDefaults() *V0041AssocSharesObjListInnerTres {
	this := V0041AssocSharesObjListInnerTres{}
	return &this
}

// GetRunSeconds returns the RunSeconds field value if set, zero value otherwise.
func (o *V0041AssocSharesObjListInnerTres) GetRunSeconds() []V0041SharesUint64TresListInner {
	if o == nil || IsNil(o.RunSeconds) {
		var ret []V0041SharesUint64TresListInner
		return ret
	}
	return o.RunSeconds
}

// GetRunSecondsOk returns a tuple with the RunSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041AssocSharesObjListInnerTres) GetRunSecondsOk() ([]V0041SharesUint64TresListInner, bool) {
	if o == nil || IsNil(o.RunSeconds) {
		return nil, false
	}
	return o.RunSeconds, true
}

// HasRunSeconds returns a boolean if a field has been set.
func (o *V0041AssocSharesObjListInnerTres) HasRunSeconds() bool {
	if o != nil && !IsNil(o.RunSeconds) {
		return true
	}

	return false
}

// SetRunSeconds gets a reference to the given []V0041SharesUint64TresListInner and assigns it to the RunSeconds field.
func (o *V0041AssocSharesObjListInnerTres) SetRunSeconds(v []V0041SharesUint64TresListInner) {
	o.RunSeconds = v
}

// GetGroupMinutes returns the GroupMinutes field value if set, zero value otherwise.
func (o *V0041AssocSharesObjListInnerTres) GetGroupMinutes() []V0041SharesUint64TresListInner {
	if o == nil || IsNil(o.GroupMinutes) {
		var ret []V0041SharesUint64TresListInner
		return ret
	}
	return o.GroupMinutes
}

// GetGroupMinutesOk returns a tuple with the GroupMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041AssocSharesObjListInnerTres) GetGroupMinutesOk() ([]V0041SharesUint64TresListInner, bool) {
	if o == nil || IsNil(o.GroupMinutes) {
		return nil, false
	}
	return o.GroupMinutes, true
}

// HasGroupMinutes returns a boolean if a field has been set.
func (o *V0041AssocSharesObjListInnerTres) HasGroupMinutes() bool {
	if o != nil && !IsNil(o.GroupMinutes) {
		return true
	}

	return false
}

// SetGroupMinutes gets a reference to the given []V0041SharesUint64TresListInner and assigns it to the GroupMinutes field.
func (o *V0041AssocSharesObjListInnerTres) SetGroupMinutes(v []V0041SharesUint64TresListInner) {
	o.GroupMinutes = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *V0041AssocSharesObjListInnerTres) GetUsage() []V0041SharesFloat128TresListInner {
	if o == nil || IsNil(o.Usage) {
		var ret []V0041SharesFloat128TresListInner
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0041AssocSharesObjListInnerTres) GetUsageOk() ([]V0041SharesFloat128TresListInner, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *V0041AssocSharesObjListInnerTres) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []V0041SharesFloat128TresListInner and assigns it to the Usage field.
func (o *V0041AssocSharesObjListInnerTres) SetUsage(v []V0041SharesFloat128TresListInner) {
	o.Usage = v
}

func (o V0041AssocSharesObjListInnerTres) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0041AssocSharesObjListInnerTres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunSeconds) {
		toSerialize["run_seconds"] = o.RunSeconds
	}
	if !IsNil(o.GroupMinutes) {
		toSerialize["group_minutes"] = o.GroupMinutes
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableV0041AssocSharesObjListInnerTres struct {
	value *V0041AssocSharesObjListInnerTres
	isSet bool
}

func (v NullableV0041AssocSharesObjListInnerTres) Get() *V0041AssocSharesObjListInnerTres {
	return v.value
}

func (v *NullableV0041AssocSharesObjListInnerTres) Set(val *V0041AssocSharesObjListInnerTres) {
	v.value = val
	v.isSet = true
}

func (v NullableV0041AssocSharesObjListInnerTres) IsSet() bool {
	return v.isSet
}

func (v *NullableV0041AssocSharesObjListInnerTres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0041AssocSharesObjListInnerTres(val *V0041AssocSharesObjListInnerTres) *NullableV0041AssocSharesObjListInnerTres {
	return &NullableV0041AssocSharesObjListInnerTres{value: val, isSet: true}
}

func (v NullableV0041AssocSharesObjListInnerTres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0041AssocSharesObjListInnerTres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
