---
# tasks file for amdgpu_install
#
# Ansible implementation of this document:
#   https://rocm.docs.amd.com/projects/install-on-linux/en/latest/install/amdgpu-install.html

- name: RedHat preparation tasks
  tags: ['prep']
  become: true
  when:
    - ansible_os_family in ['RedHat']
    - amdgpu_install_get is truthy(convert_bool=True)
  block:
    - name: "Ensure CodeReady Builder+EPEL for RHEL/derivatives [that aren't Fedora]"
      when: ansible_distribution not in ['Fedora']
      block:
        - name: "RedHat : Manage CRB"
          community.general.dnf_config_manager:
            name: crb
            state: enabled

        - name: "RedHat : Ensure EPEL"
          ansible.builtin.package:
            name: "{{ epel[ansible_distribution] | default('epel-release') }}"  # CentOS/etc provide 'epel-release'; RedHat and others may require download
            state: present
          vars:
            epel:
              RedHat: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"

- name: Install 'amdgpu-install'
  become: true
  when: amdgpu_install_get is truthy(convert_bool=True)
  ansible.builtin.package:
    # URL/file path handling is inconsistent w/ backing package managers
    deb: "{{ _install_pkg if ansible_os_family in ['Debian'] else omit }}"
    name: "{{ _install_pkg if ansible_os_family not in ['Debian'] else omit }}"
    # ensure dependencies may resolve on truly-new hosts
    update_cache: true
    # opt out of check/enforcement; this package manages the keyring for subsequent work
    disable_gpg_check: "{{ true if ansible_os_family in ['RedHat'] else omit }}"
  vars:
    _install_pkg: "{{ amdgpu_install_pkg_patts[ansible_distribution] if amdgpu_install_pkg is match('templated') else amdgpu_install_pkg }}"

- name: "Install Requirements"
  become: true
  ansible.builtin.package:
    name: "{{ amdgpu_install_pre['common'] + amdgpu_install_pre[ansible_os_family] }}"
    state: present
    update_cache: true  # ensure repo(s) provided by 'amdgpu-install{,-internal}' are cached

- name: Gather package facts
  ansible.builtin.package_facts:

- name: "Internal : 'amdgpu-repo' (when 'internal' and build(s) provided)"
  become: true
  changed_when: true  # satisfy linting, assume changed when run
  ansible.builtin.shell: >
    amdgpu-repo
    {% if amdgpu_install_rocm_branch is defined %}--rocm-build={{ amdgpu_install_rocm_branch }}{% endif %}
    {% if amdgpu_install_branch is defined %}--amdgpu-build={{ amdgpu_install_branch }}{% endif %}
  when:
    - (amdgpu_install_branch is defined) or (amdgpu_install_rocm_branch is defined)
    - '"amdgpu-install-internal" in ansible_facts.packages'  # generally does not apply to GA releases, internal only

- name: "Install 'extra' packages"
  become: true
  when: rocm_extras is defined
  ansible.builtin.package:
    name: "{{ rocm_extras | split(',') }}"  # generate/process list from comma-separated string passed from Ansible -> Packer -> Ansible
    state: present
    update_cache: true
    allow_downgrade: true  # may have specified past releases, may be required to satisfy the request(s)

- name: "Usecase(s): {{ amdgpu_install_usecases }}"
  become: true
  register: amdgpu_install_run
  ansible.builtin.shell:
    cmd: >
      amdgpu-install -y --usecase={{ amdgpu_install_usecases }}
      {% for installarg, argval in (amdgpu_install_args | default({})).items() %}
      --{{ installarg }}{% if argval %}={{ argval }}{% endif %}
      {% endfor %}
  changed_when: > # may wrap Apt/DNF/Yum - try to report changes accurately based on strings in output
    amdgpu_install_run.stdout_lines | select('match', '(?:(.*will be (?:installed|REMOVED).*)|Installed:|Removed:)')
